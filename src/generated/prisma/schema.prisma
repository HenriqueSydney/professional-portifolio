generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  role          Role            @default(USER)
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  PostComments      PostComments[]
  PostCommentsLikes PostCommentsLikes[]
  PostLikes         PostLikes[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model NewsLetterSubscriptions {
  id                    Int       @id @default(autoincrement()) ///Entity ID
  email                 String    @unique @db.VarChar(256) ///Email used for subscription
  confirmationId        String    @unique @default(uuid()) @map("confirmation_id") @db.Char(32) ///Universion ID generated on subscription
  confirmationExpiresAt DateTime  @map("confirmation_expires_at") ///Date of expiration to confirm subscription before enable new subscription for the same email
  createdAt             DateTime  @default(now()) @map("created_at") ///Entity creation date
  confirmedAt           DateTime? @map("confirmed_at") ///Date of the confirmation of subscription
  canceledAt            DateTime? @map("canceled_at") ///Date of the cancelled subscription

  @@index([confirmedAt, canceledAt])
  @@map("news_letter_subscription")
}

enum TranslatedModel {
  MICROSOFT_TRANSLATOR
  GOOGLE_CLOUD_TRANSLATE
  DEEPL
  AMAZON_TRANSLATE
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model Posts {
  id         Int      @id @default(autoincrement()) ///Entity ID
  notionId   String   @unique @map("notion_id") ///Notion Post ID
  slug       String   @unique /// Post Slug
  category   String   @db.VarChar(50) ///Post Category
  tags       String[] @default([]) ///Post Tags
  coverUrl   String   @map("cover_url") ///Post Cover Image URL
  excerpt_pt String   @map("excerpt_pt") @db.VarChar(500) ///Post Excerpt in Portuguese (varchar 500)
  excerpt_en String   @map("excerpt_en") @db.VarChar(500) ///Post Excerpt in English (varchar 500)
  readTime   Int      @map("read_time") ///Post Read estimated time
  featured   Boolean ///If post is featured to be highlighted
  Priority   Int      @db.SmallInt ///Post priority to be at top of posts

  translatedModel TranslatedModel @map("translated_model") ///Translation model used to translate to english
  ptBr            Json            @map("pt_br") ///Notion JSON in Portuguese
  en              Json ///Notion JSON in English

  status      PostStatus @default(DRAFT) ///Status of the post DRAFT, PUBLISHED OR ARCHIVED
  publishedAt DateTime?  @map("published_at") ///Date of Publish
  createdAt   DateTime   @default(now()) @map("created_at") ///Date of creation
  updatedAt   DateTime   @updatedAt @map("updated_at") ///Last date that was edited

  PostMetrics  PostMetrics?
  PostComments PostComments[]

  @@index([tags, category])
  @@index([featured])
  @@index([translatedModel])
  @@index([slug])
  @@index([status, publishedAt]) // Para listagem de posts publicados
  @@index([createdAt])
  @@map("posts")
}

model PostMetrics {
  id              Int         @id @default(autoincrement()) ///Entity ID
  postId          Int         @unique @map("post_id") ///Post Id
  post            Posts       @relation(fields: [postId], references: [id])
  numberOfViews   Int         @default(0) @map("number_of_views") ///Number of incremental views
  totalOfComments Int         @default(0) @map("total_of_comments") @db.SmallInt ///Total of comments
  numberOfLikes   Int         @default(0) @map("number_of_likes") @db.SmallInt ///Number of likes
  PostLikes       PostLikes[]

  @@map("post_metrics")
}

model PostLikes {
  userId String @map("user_id") ///User Id
  user   User   @relation(fields: [userId], references: [id])

  postMetricsId Int         @map("post_metrics_id") ///Post Metrics Id
  post          PostMetrics @relation(fields: [postMetricsId], references: [id])

  createdAt DateTime @default(now()) @map("created_at") ///Date of creation

  @@id([userId, postMetricsId])
  @@index([postMetricsId])
  @@map("post_likes")
}

model PostComments {
  id Int @id @default(autoincrement()) ///Entity ID

  userId String @map("user_id") ///User ID
  user   User   @relation(fields: [userId], references: [id])

  postId Int   @map("post_id") ///Post ID
  post   Posts @relation(fields: [postId], references: [id])

  comment       String ///Actual comment
  numberOfLikes Int    @default(0) @map("number_of_likes") @db.SmallInt ///Number of likes of the comment

  createdAt         DateTime            @default(now()) @map("created_at") ///Entity creation date
  updatedAt         DateTime            @default(now()) @map("updated_at") ///Entity last updated date
  PostCommentsLikes PostCommentsLikes[]

  @@index([userId])
  @@index([postId])
  @@map("post_comments")
}

model PostCommentsLikes {
  userId String @map("user_id") ///User ID
  user   User   @relation(fields: [userId], references: [id])

  postCommentId Int          @map("post_comments_id") ///Comment ID
  postComments  PostComments @relation(fields: [postCommentId], references: [id])

  createdAt DateTime @default(now()) @map("created_at") ///Entity creation date

  @@id([userId, postCommentId])
  @@index([postCommentId])
  @@map("post_comments_likes")
}

enum ProfileInformationType {
  STATS
  SKILLS
  EXPERIENCE
  CERTIFICATION
}

model ProfileInformation {
  id                     Int                    @id @default(autoincrement()) ///Entity ID
  profileInformationType ProfileInformationType @unique @map("profile_information_type") ///Profile type of Information (ENUM)
  ptBr                   Json                   @map("pt_br") ///Information in original language (pt-BR)
  en                     Json ///Information translated to english

  @@index([profileInformationType])
  @@map("profile_information")
}
