name: Build and Push

on:
  workflow_call:
    inputs:
      image-name:
        description: "Docker image name"
        required: false
        type: string
        default: "henriquelimadev/professional-portfolio"
      tag-name:
        description: "Custom tag name (if not provided, uses git SHA)"
        required: false
        type: string
        default: ""
      node-version:
        description: "Node.js version to use"
        required: false
        type: string
        default: "20.19.0"
      dockerfile:
        description: "Path to Dockerfile"
        required: false
        type: string
        default: "Dockerfile"
      build-args:
        description: "Build arguments as JSON string"
        required: false
        type: string
        default: ""
    outputs:
      image-tag:
        description: "Generated or provided image tag"
        value: ${{ jobs.build-and-push.outputs.image-tag }}
      full-image-name:
        description: "Full image name with tag"
        value: ${{ jobs.build-and-push.outputs.full-image-name }}
    secrets:
      DOCKERHUB_USERNAME:
        description: "DockerHub username"
        required: true
      DOCKERHUB_TOKEN:
        description: "DockerHub token"
        required: true

jobs:
  build-and-push:
    name: "Build and Push Docker Image"
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.determine_tag.outputs.tag }}
      full-image-name: ${{ steps.determine_tag.outputs.full_image_name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: ./.github/actions/setup-node
        with:
          node-version: ${{ inputs.node-version }}

      - name: Determine tag
        id: determine_tag
        run: |
          if [ -n "${{ inputs.tag-name }}" ]; then
            TAG="${{ inputs.tag-name }}"
            echo "Using custom tag: $TAG"
          else
            TAG=$(echo $GITHUB_SHA | head -c7)
            echo "Using SHA tag: $TAG"
          fi
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "full_image_name=${{ inputs.image-name }}:$TAG" >> $GITHUB_OUTPUT

      - name: Parse build args
        id: parse_build_args
        run: |
          if [ -n "${{ inputs.build-args }}" ]; then
            echo "build_args_flag=--build-arg" >> $GITHUB_OUTPUT
            echo '${{ inputs.build-args }}' | jq -r 'to_entries[] | "--build-arg \(.key)=\(.value)"' | tr '\n' ' ' > build_args.txt
            echo "build_args=$(cat build_args.txt)" >> $GITHUB_OUTPUT
          else
            echo "build_args_flag=" >> $GITHUB_OUTPUT
            echo "build_args=" >> $GITHUB_OUTPUT
          fi

      - name: Save tag for deployment
        run: echo "${{ steps.determine_tag.outputs.tag }}" > build-tag

      - name: Upload tag artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-tag-${{ github.run_id }}
          path: build-tag

      - name: Login into the container registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ inputs.dockerfile }}
          push: false
          load: true
          tags: ${{ inputs.image-name }}:${{ steps.determine_tag.outputs.tag }},${{ inputs.image-name }}:latest-${{ inputs.tag-name || 'main' }}
          build-args: ${{ inputs.build-args }}

      - name: Run Trivy vulnerability scanner
        if: ${{ inputs.tag-name == 'test' }}
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: "${{ inputs.image-name }}:${{ steps.determine_tag.outputs.tag }}"
          format: "sarif"
          output: "trivy-results-${{ inputs.tag-name || 'main' }}.sarif"
          exit-code: "0"
          ignore-unfixed: true
          vuln-type: "os,library"
          severity: "CRITICAL,HIGH"

      - name: Upload Trivy scan results to GitHub Security tab
        if: ${{ inputs.tag-name == 'test' && always() }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "trivy-results-${{ inputs.tag-name || 'main' }}.sarif"

      - name: Push Docker image to DockerHub
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ inputs.dockerfile }}
          push: true
          tags: ${{ inputs.image-name }}:${{ steps.determine_tag.outputs.tag }},${{ inputs.image-name }}:latest-${{ inputs.tag-name || 'main' }}
          build-args: ${{ inputs.build-args }}
